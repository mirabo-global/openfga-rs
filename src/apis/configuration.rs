/*
 * OpenFGA
 *
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@openfga.dev
 * Generated by: https://openapi-generator.tech
 */

use std::convert::TryFrom;

use reqwest::header;

#[derive(Debug, Clone)]
pub struct Configuration {
    pub base_path: String,
    pub user_agent: Option<String>,
    pub client: reqwest::Client,
    // TODO: take an oauth2 token source, similar to the go one
}

pub type BasicAuth = (String, Option<String>);

#[derive(Debug, Clone)]
pub struct ApiKey {
    pub prefix: Option<String>,
    pub key: String,
}

impl Configuration {
    pub fn new(
        base_path: String,
        user_agent: Option<String>,
        bearer_access_token: Option<String>,
    ) -> Configuration {
        let mut default_headers = header::HeaderMap::new();
        if let Some(token) = bearer_access_token {
            let bearer = format!("Bearer {}", token);
            let mut value = header::HeaderValue::try_from(bearer).expect("Invalid bearer token format");
            value.set_sensitive(true);

            default_headers.insert(header::AUTHORIZATION, value);
        }

        let client = reqwest::Client::builder()
            .default_headers(default_headers)
            .build()
            .expect("Failed to build reqwest client");

        Configuration {
            base_path,
            user_agent,
            client,
        }
    }
}

impl Default for Configuration {
    fn default() -> Self {
        Configuration {
            base_path: "http://localhost".to_owned(),
            user_agent: Some("OpenAPI-Generator/0.1/rust".to_owned()),
            client: reqwest::Client::new(),
        }
    }
}
